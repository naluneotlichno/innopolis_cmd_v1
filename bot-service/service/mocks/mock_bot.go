// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mock_bot.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	service "bot-service/service"
	reflect "reflect"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockBotAPI is a mock of BotAPI interface.
type MockBotAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBotAPIMockRecorder
	isgomock struct{}
}

// MockBotAPIMockRecorder is the mock recorder for MockBotAPI.
type MockBotAPIMockRecorder struct {
	mock *MockBotAPI
}

// NewMockBotAPI creates a new mock instance.
func NewMockBotAPI(ctrl *gomock.Controller) *MockBotAPI {
	mock := &MockBotAPI{ctrl: ctrl}
	mock.recorder = &MockBotAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotAPI) EXPECT() *MockBotAPIMockRecorder {
	return m.recorder
}

// GetUpdatesChan mocks base method.
func (m *MockBotAPI) GetUpdatesChan(config tgbotapi.UpdateConfig) tgbotapi.UpdatesChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatesChan", config)
	ret0, _ := ret[0].(tgbotapi.UpdatesChannel)
	return ret0
}

// GetUpdatesChan indicates an expected call of GetUpdatesChan.
func (mr *MockBotAPIMockRecorder) GetUpdatesChan(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatesChan", reflect.TypeOf((*MockBotAPI)(nil).GetUpdatesChan), config)
}

// Request mocks base method.
func (m *MockBotAPI) Request(c tgbotapi.Chattable) (*tgbotapi.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", c)
	ret0, _ := ret[0].(*tgbotapi.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockBotAPIMockRecorder) Request(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockBotAPI)(nil).Request), c)
}

// Send mocks base method.
func (m *MockBotAPI) Send(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", c)
	ret0, _ := ret[0].(tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockBotAPIMockRecorder) Send(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBotAPI)(nil).Send), c)
}

// MockConfigLoader is a mock of ConfigLoader interface.
type MockConfigLoader struct {
	ctrl     *gomock.Controller
	recorder *MockConfigLoaderMockRecorder
	isgomock struct{}
}

// MockConfigLoaderMockRecorder is the mock recorder for MockConfigLoader.
type MockConfigLoaderMockRecorder struct {
	mock *MockConfigLoader
}

// NewMockConfigLoader creates a new mock instance.
func NewMockConfigLoader(ctrl *gomock.Controller) *MockConfigLoader {
	mock := &MockConfigLoader{ctrl: ctrl}
	mock.recorder = &MockConfigLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigLoader) EXPECT() *MockConfigLoaderMockRecorder {
	return m.recorder
}

// LoadConfig mocks base method.
func (m *MockConfigLoader) LoadConfig() (*service.ButtonConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig")
	ret0, _ := ret[0].(*service.ButtonConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfig indicates an expected call of LoadConfig.
func (mr *MockConfigLoaderMockRecorder) LoadConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockConfigLoader)(nil).LoadConfig))
}

// MockUserStateManager is a mock of UserStateManager interface.
type MockUserStateManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserStateManagerMockRecorder
	isgomock struct{}
}

// MockUserStateManagerMockRecorder is the mock recorder for MockUserStateManager.
type MockUserStateManagerMockRecorder struct {
	mock *MockUserStateManager
}

// NewMockUserStateManager creates a new mock instance.
func NewMockUserStateManager(ctrl *gomock.Controller) *MockUserStateManager {
	mock := &MockUserStateManager{ctrl: ctrl}
	mock.recorder = &MockUserStateManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStateManager) EXPECT() *MockUserStateManagerMockRecorder {
	return m.recorder
}

// GetLang mocks base method.
func (m *MockUserStateManager) GetLang(userID int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLang", userID)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLang indicates an expected call of GetLang.
func (mr *MockUserStateManagerMockRecorder) GetLang(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLang", reflect.TypeOf((*MockUserStateManager)(nil).GetLang), userID)
}

// SetLang mocks base method.
func (m *MockUserStateManager) SetLang(userID int64, lang string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLang", userID, lang)
}

// SetLang indicates an expected call of SetLang.
func (mr *MockUserStateManagerMockRecorder) SetLang(userID, lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLang", reflect.TypeOf((*MockUserStateManager)(nil).SetLang), userID, lang)
}
