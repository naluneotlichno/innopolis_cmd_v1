// bot_service.go ‚Äî —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ —Å YAML-–∫–Ω–æ–ø–∫–∞–º–∏, Viper –∏ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å—é

package service

import (
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/rs/zerolog/log"
	"github.com/spf13/viper"
)

// ButtonConfig –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É YAML-—Ñ–∞–π–ª–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–∞–º–∏
// buttons: lang -> menu -> –∫–Ω–æ–ø–∫–∏
// texts: lang -> key -> —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
type ButtonConfig struct {
	Buttons map[string]map[string][][]string `mapstructure:"buttons"`
	Texts   map[string]map[string]string     `mapstructure:"texts"`
}

// BotService ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram-–±–æ—Ç–æ–º
// –í–∫–ª—é—á–∞–µ—Ç —Å–∞–º –±–æ—Ç, –∫–æ–Ω—Ñ–∏–≥ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –∏ –∫–∞—Ä—Ç—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
type BotService struct {
	bot       BotAPI
	cfg       *ButtonConfig
	langState sync.Map // –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∞–ø–∞: userID -> —è–∑—ã–∫
}

// SyncMapUserStateManager ‚Äî —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è UserStateManager —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º sync.Map
type SyncMapUserStateManager struct {
	langState *sync.Map
}

// NewSyncMapUserStateManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
func NewSyncMapUserStateManager() *SyncMapUserStateManager {
	return &SyncMapUserStateManager{
		langState: &sync.Map{},
	}
}

// GetLang –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —è–∑—ã–∫ —é–∑–µ—Ä–∞, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–Ω–∞—á–µ ‚Äî —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func (s *SyncMapUserStateManager) GetLang(userID int64) string {
	// –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∞–ø—ã
	if val, ok := s.langState.Load(userID); ok {
		// –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∏–∑ –º–∞–ø—ã
		return val.(string)
	}
	// –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	return viper.GetString("bot.language")
}

// SetLang —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —è–∑—ã–∫ –≤ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—É—é –º–∞–ø—É
func (s *SyncMapUserStateManager) SetLang(userID int64, lang string) {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—É—é –º–∞–ø—É
	s.langState.Store(userID, lang)
}

// NewBotService —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä BotService –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —á–µ—Ä–µ–∑ Viper
func NewBotService(token string) (*BotService, error) {
	log.Info().
		Str("stage", "init").
		Str("action", "create_bot_api").
		Msg("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Telegram Bot API")

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Error().
			Str("stage", "init").
			Str("action", "create_bot_api").
			Err(err).
			Msg("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram Bot API")
		return nil, err
	}

	cfg, err := loadConfig()
	if err != nil {
		return nil, err
	}

	log.Info().
		Str("stage", "init").
		Str("action", "ready").
		Msg("BotService —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	return &BotService{
		bot:       bot,
		cfg:       cfg,
		langState: sync.Map{},
	}, nil
}

// NewBotServiceWithDependencies —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π BotService —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
func NewBotServiceWithDependencies(bot BotAPI, cfg *ButtonConfig) *BotService {
	return &BotService{
		bot:       bot,
		cfg:       cfg,
		langState: sync.Map{},
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
func (s *BotService) Start() {
	log.Info().
		Str("stage", "start").
		Msg("–ë–æ—Ç –Ω–∞—á–∞–ª –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = viper.GetInt("bot.update_timeout")
	updates := s.bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			s.HandleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			s.HandleCallback(update.CallbackQuery)
		}
	}
}

// GetLang –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —è–∑—ã–∫ —é–∑–µ—Ä–∞, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–Ω–∞—á–µ ‚Äî —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func (s *BotService) GetLang(userID int64) string {
	// –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∞–ø—ã
	if val, ok := s.langState.Load(userID); ok {
		// –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∏–∑ –º–∞–ø—ã
		return val.(string)
	}
	// –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	return viper.GetString("bot.language")
}

// SetLang —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —è–∑—ã–∫ –≤ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—É—é –º–∞–ø—É
func (s *BotService) SetLang(userID int64, lang string) {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—É—é –º–∞–ø—É
	s.langState.Store(userID, lang)
}

// SendMessage ‚Äî –∫—É—Ä—å–µ—Ä —Å—Ä–µ–¥–∏ —Ñ—É–Ω–∫—Ü–∏–π: –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –≤ —á–∞—Ç
func (s *BotService) SendMessage(chatID int64, text string, markup interface{}) {
	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
	msg := tgbotapi.NewMessage(chatID, text)
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
	msg.ReplyMarkup = markup
	// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
	if _, err := s.bot.Send(msg); err != nil {
		log.Error().
			Str("stage", "send message").
			Int64("chat_id", chatID).
			Err(err).
			Msg("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
	}
}

// HandleCallback ‚Äî —à–∞–º–∞–Ω –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –º–∏—Ä–∞: –ª–æ–≤–∏—Ç –Ω–∞–∂–∞—Ç–∏—è
func (s *BotService) HandleCallback(cb *tgbotapi.CallbackQuery) {
	userID := cb.From.ID
	lang := s.GetLang(userID)

	var (
		text     string
		keyboard tgbotapi.InlineKeyboardMarkup
	)

	switch cb.Data {
	case "start_tour":
		text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é –ø–æ –ò–Ω–Ω–æ–ø–æ–ª–∏—Å—É! üèõÔ∏è"
		keyboard = s.CreateKeyboard(lang, "excursion")

	case "show_routes":
		text = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ üó∫Ô∏è"
		keyboard = s.CreateKeyboard(lang, "main")

	case "change_language":
		if lang == "ru" {
			lang = "en"
			text = s.cfg.Texts["en"]["start_message"]
		} else {
			lang = "ru"
			text = s.cfg.Texts["ru"]["start_message"]
		}
		s.SetLang(userID, lang)
		keyboard = s.CreateKeyboard(lang, "main")

	case "menu":
		text = s.cfg.Texts[lang]["start_message"]
		keyboard = s.CreateKeyboard(lang, "main")

	case "back", "next":
		text = "–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —ç–∫—Å–∫—É—Ä—Å–∏–∏..."
		keyboard = s.CreateKeyboard(lang, "excursion")
	}

	log.Info().
		Str("action", cb.Data).
		Str("username", cb.From.UserName).
		Int64("chat_id", cb.Message.Chat.ID).
		Msg("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞")

	s.SendMessage(cb.Message.Chat.ID, text, keyboard)

	// –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
	_, err := s.bot.Request(tgbotapi.NewCallback(cb.ID, ""))
	if err != nil {
		log.Error().
			Str("stage", "callback response").
			Str("callback_id", cb.ID).
			Str("username", cb.From.UserName).
			Int64("chat_id", cb.Message.Chat.ID).
			Err(err).
			Msg("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ callback-–æ—Ç–≤–µ—Ç–∞")
	}
}

// HandleMessage ‚Äî –¥–∏—Ä–∏–∂—ë—Ä –∫–æ–º–∞–Ω–¥
func (s *BotService) HandleMessage(msg *tgbotapi.Message) {
	// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start
	if msg.IsCommand() && msg.Command() == "start" {
		userID := msg.From.ID
		lang := s.GetLang(userID)

		text := s.cfg.Texts[lang]["start_message"]
		keyboard := s.CreateKeyboard(lang, "main")

		log.Info().
			Str("action", "start").
			Str("username", msg.From.UserName).
			Int64("chat_id", msg.Chat.ID).
			Msg("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —ç–∫—Å–∫—É—Ä—Å–∏—é")

		s.SendMessage(msg.Chat.ID, text, keyboard)
	}
}

// CreateKeyboard ‚Äî –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –±—ã—Ç–∏—è. –°–æ–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ YAML
func (s *BotService) CreateKeyboard(lang, menu string) tgbotapi.InlineKeyboardMarkup {
	// –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ –º–µ–Ω—é
	layout := s.cfg.Buttons[lang][menu]
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
	txts := s.cfg.Texts[lang]

	// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Å—Ç—Ä–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	var rows [][]tgbotapi.InlineKeyboardButton
	// –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏
	for _, row := range layout {
		// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
		var btnRow []tgbotapi.InlineKeyboardButton
		// –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª—é—á—É –≤ —Å—Ç—Ä–æ–∫–µ
		for _, key := range row {
			// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ –∫–ª—é—á—É
			label := txts[key]
			// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª—é—á–æ–º
			btn := tgbotapi.NewInlineKeyboardButtonData(label, key)
			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å—Ç—Ä–æ–∫—É
			btnRow = append(btnRow, btn)
		}
		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		rows = append(rows, btnRow)
	}
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}
