// –¢–µ—Å—Ç—ã –¥–ª—è –±–æ—Ç–∞ ‚Äî –∫–∞–∫ –º–µ–¥–∏—Ç–∞—Ü–∏—è —Å—Ç–æ–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è—é—Ç –≤—Å—ë, –Ω–æ –Ω–∏—á–µ–º—É –Ω–µ —É–¥–∏–≤–ª—è—é—Ç—Å—è
package tests

import (
	"bot-service/service"
	"bot-service/service/mocks"
	"testing"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/stretchr/testify/assert"
	"go.uber.org/mock/gomock"
)

func TestBotService_sendMessage(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –º–æ–∫–∞
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	// –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è BotAPI
	mockBot := mocks.NewMockBotAPI(ctrl)

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	chatID := int64(123456789)
	text := "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç! üöÄ"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ö–Ω–æ–ø–∫–∞", "data"),
		),
	)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –º–æ–∫–∞
	// –õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ —á–∞—Ç —Å chatID –∏ —Ç–µ–∫—Å—Ç–æ–º text
	mockBot.EXPECT().
		Send(gomock.Any()). // –í–∞–∂–Ω–æ! –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –ª—É—á—à–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º
		Return(tgbotapi.Message{}, nil).
		Times(1)

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Å–µ—Ä–≤–∏—Å —Å –º–æ–∫–æ–º –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
	cfg := &service.ButtonConfig{
		Buttons: map[string]map[string][][]string{},
		Texts:   map[string]map[string]string{},
	}
	botService := service.NewBotServiceWithDependencies(mockBot, cfg)

	// –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–µ—Ç–æ–¥
	botService.SendMessage(chatID, text, keyboard)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ mockBot.EXPECT()
}

func TestBotService_handleCallback(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –º–æ–∫–∞
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	// –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è BotAPI
	mockBot := mocks.NewMockBotAPI(ctrl)

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ª–±–µ–∫–∞ "change_language"
	userID := int64(123456789)
	callbackData := "change_language"

	callback := &tgbotapi.CallbackQuery{
		ID: "callback123",
		From: &tgbotapi.User{
			ID:       userID,
			UserName: "testuser",
		},
		Message: &tgbotapi.Message{
			Chat: &tgbotapi.Chat{
				ID: userID,
			},
		},
		Data: callbackData,
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
	cfg := &service.ButtonConfig{
		Buttons: map[string]map[string][][]string{
			"ru": {
				"main": {{"menu", "change_language"}},
			},
			"en": {
				"main": {{"menu", "change_language"}},
			},
		},
		Texts: map[string]map[string]string{
			"ru": {
				"start_message":   "–ü—Ä–∏–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
				"menu":            "–ú–µ–Ω—é",
				"change_language": "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
			},
			"en": {
				"start_message":   "Hello in English",
				"menu":            "Menu",
				"change_language": "Change language",
			},
		},
	}

	// –û–∂–∏–¥–∞–µ–º –¥–≤–µ –æ—Ç–ø—Ä–∞–≤–∫–∏: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–ª–±–µ–∫
	mockBot.EXPECT().
		Send(gomock.Any()).
		Return(tgbotapi.Message{}, nil).
		Times(1)

	mockBot.EXPECT().
		Request(gomock.Any()).
		Return(&tgbotapi.APIResponse{}, nil).
		Times(1)

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Å–µ—Ä–≤–∏—Å —Å –º–æ–∫–æ–º –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
	botService := service.NewBotServiceWithDependencies(mockBot, cfg)

	// –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–µ—Ç–æ–¥
	botService.HandleCallback(callback)

	// –ü—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ EXPECT —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∏
	// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–∏–ª—Å—è,
	// –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–¥–æ –±—ã –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–¥, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å UserStateManager
}

func TestBotService_handleMessage_Start(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –º–æ–∫–∞
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	// –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è BotAPI
	mockBot := mocks.NewMockBotAPI(ctrl)

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := &tgbotapi.Message{
		MessageID: 123,
		From: &tgbotapi.User{
			ID:       int64(123456789),
			UserName: "testuser",
		},
		Chat: &tgbotapi.Chat{
			ID: int64(123456789),
		},
		Text:     "/start",
		Entities: []tgbotapi.MessageEntity{{Type: "bot_command", Offset: 0, Length: 6}},
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
	cfg := &service.ButtonConfig{
		Buttons: map[string]map[string][][]string{
			"ru": {
				"main": {{"menu", "change_language"}},
			},
		},
		Texts: map[string]map[string]string{
			"ru": {
				"start_message":   "–ü—Ä–∏–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
				"menu":            "–ú–µ–Ω—é",
				"change_language": "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
			},
		},
	}

	// –û–∂–∏–¥–∞–µ–º –æ–¥–Ω—É –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
	mockBot.EXPECT().
		Send(gomock.Any()).
		Return(tgbotapi.Message{}, nil).
		Times(1)

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Å–µ—Ä–≤–∏—Å —Å –º–æ–∫–æ–º –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
	botService := service.NewBotServiceWithDependencies(mockBot, cfg)

	// –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–µ—Ç–æ–¥
	botService.HandleMessage(message)

	// –ü—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ EXPECT —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∏
}

func TestBotService_createKeyboard(t *testing.T) {
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
	cfg := &service.ButtonConfig{
		Buttons: map[string]map[string][][]string{
			"ru": {
				"main": {{"button1", "button2"}, {"button3"}},
			},
		},
		Texts: map[string]map[string]string{
			"ru": {
				"button1": "–ö–Ω–æ–ø–∫–∞ 1",
				"button2": "–ö–Ω–æ–ø–∫–∞ 2",
				"button3": "–ö–Ω–æ–ø–∫–∞ 3",
			},
		},
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –º–æ–∫–∞ (—Ö–æ—Ç—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω)
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	// –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è BotAPI (—Ö–æ—Ç—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
	mockBot := mocks.NewMockBotAPI(ctrl)

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Å–µ—Ä–≤–∏—Å
	botService := service.NewBotServiceWithDependencies(mockBot, cfg)

	// –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–µ—Ç–æ–¥
	keyboard := botService.CreateKeyboard("ru", "main")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	assert.Equal(t, 2, len(keyboard.InlineKeyboard), "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 —Ä—è–¥–∞ –∫–Ω–æ–ø–æ–∫")
	assert.Equal(t, 2, len(keyboard.InlineKeyboard[0]), "–í –ø–µ—Ä–≤–æ–º —Ä—è–¥—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –∫–Ω–æ–ø–∫–∏")
	assert.Equal(t, 1, len(keyboard.InlineKeyboard[1]), "–í–æ –≤—Ç–æ—Ä–æ–º —Ä—è–¥—É –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1 –∫–Ω–æ–ø–∫–∞")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
	assert.Equal(t, "–ö–Ω–æ–ø–∫–∞ 1", keyboard.InlineKeyboard[0][0].Text, "–¢–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '–ö–Ω–æ–ø–∫–∞ 1'")
	assert.Equal(t, "–ö–Ω–æ–ø–∫–∞ 2", keyboard.InlineKeyboard[0][1].Text, "–¢–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '–ö–Ω–æ–ø–∫–∞ 2'")
	assert.Equal(t, "–ö–Ω–æ–ø–∫–∞ 3", keyboard.InlineKeyboard[1][0].Text, "–¢–µ–∫—Å—Ç —Ç—Ä–µ—Ç—å–µ–π –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '–ö–Ω–æ–ø–∫–∞ 3'")
}
