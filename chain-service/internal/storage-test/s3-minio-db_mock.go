// Code generated by MockGen. DO NOT EDIT.
// Source: s3-minio-db.go
//
// Generated by this command:
//
//	mockgen -source=s3-minio-db.go -destination=s3-minio-db_mock.go -package=storage
//

// Package storage is a generated GoMock package.
package storagetest

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorageRepository is a mock of StorageRepository interface.
type MockStorageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStorageRepositoryMockRecorder
	isgomock struct{}
}

// MockStorageRepositoryMockRecorder is the mock recorder for MockStorageRepository.
type MockStorageRepositoryMockRecorder struct {
	mock *MockStorageRepository
}

// NewMockStorageRepository creates a new mock instance.
func NewMockStorageRepository(ctrl *gomock.Controller) *MockStorageRepository {
	mock := &MockStorageRepository{ctrl: ctrl}
	mock.recorder = &MockStorageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageRepository) EXPECT() *MockStorageRepositoryMockRecorder {
	return m.recorder
}

// SaveFileInfo mocks base method.
func (m *MockStorageRepository) SaveFileInfo(ctx context.Context, uuid, s3Path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFileInfo", ctx, uuid, s3Path)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFileInfo indicates an expected call of SaveFileInfo.
func (mr *MockStorageRepositoryMockRecorder) SaveFileInfo(ctx, uuid, s3Path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFileInfo", reflect.TypeOf((*MockStorageRepository)(nil).SaveFileInfo), ctx, uuid, s3Path)
}
