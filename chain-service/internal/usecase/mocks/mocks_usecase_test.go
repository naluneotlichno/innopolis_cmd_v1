// Code generated by MockGen. DO NOT EDIT.
// Source: chain-service/internal/usecase/create_message_chain_usecase.go
//
// Generated by this command:
//
//	mockgen -source=chain-service/internal/usecase/create_message_chain_usecase.go -destination=chain-service/internal/usecase/mocks/mocks_usecase_test.go -package=usecase_test
//

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	reflect "reflect"

	entity "github.com/szaluzhanskaya/Innopolis/chain-service/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageChainUsecase is a mock of MessageChainUsecase interface.
type MockMessageChainUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockMessageChainUsecaseMockRecorder
	isgomock struct{}
}

// MockMessageChainUsecaseMockRecorder is the mock recorder for MockMessageChainUsecase.
type MockMessageChainUsecaseMockRecorder struct {
	mock *MockMessageChainUsecase
}

// NewMockMessageChainUsecase creates a new mock instance.
func NewMockMessageChainUsecase(ctrl *gomock.Controller) *MockMessageChainUsecase {
	mock := &MockMessageChainUsecase{ctrl: ctrl}
	mock.recorder = &MockMessageChainUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageChainUsecase) EXPECT() *MockMessageChainUsecaseMockRecorder {
	return m.recorder
}

// CreateMessageChain mocks base method.
func (m *MockMessageChainUsecase) CreateMessageChain(userID int, title string) (*entity.MessageChain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessageChain", userID, title)
	ret0, _ := ret[0].(*entity.MessageChain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessageChain indicates an expected call of CreateMessageChain.
func (mr *MockMessageChainUsecaseMockRecorder) CreateMessageChain(userID, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessageChain", reflect.TypeOf((*MockMessageChainUsecase)(nil).CreateMessageChain), userID, title)
}

// DeleteMessageChain mocks base method.
func (m *MockMessageChainUsecase) DeleteMessageChain(uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessageChain", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessageChain indicates an expected call of DeleteMessageChain.
func (mr *MockMessageChainUsecaseMockRecorder) DeleteMessageChain(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessageChain", reflect.TypeOf((*MockMessageChainUsecase)(nil).DeleteMessageChain), uuid)
}
