// Code generated by MockGen. DO NOT EDIT.
// Source: chain-service/internal/repo/message_chain_repository.go
//
// Generated by this command:
//
//	mockgen -source=chain-service/internal/repo/message_chain_repository.go -destination=chain-service/internal/usecase/mocks/mocks_repo_test.go -package=usecase_test
//

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	reflect "reflect"

	entity "github.com/szaluzhanskaya/Innopolis/chain-service/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageChainRepository is a mock of MessageChainRepository interface.
type MockMessageChainRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageChainRepositoryMockRecorder
	isgomock struct{}
}

// MockMessageChainRepositoryMockRecorder is the mock recorder for MockMessageChainRepository.
type MockMessageChainRepositoryMockRecorder struct {
	mock *MockMessageChainRepository
}

// NewMockMessageChainRepository creates a new mock instance.
func NewMockMessageChainRepository(ctrl *gomock.Controller) *MockMessageChainRepository {
	mock := &MockMessageChainRepository{ctrl: ctrl}
	mock.recorder = &MockMessageChainRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageChainRepository) EXPECT() *MockMessageChainRepositoryMockRecorder {
	return m.recorder
}

// CreateMessageChain mocks base method.
func (m *MockMessageChainRepository) CreateMessageChain(chain *entity.MessageChain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessageChain", chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMessageChain indicates an expected call of CreateMessageChain.
func (mr *MockMessageChainRepositoryMockRecorder) CreateMessageChain(chain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessageChain", reflect.TypeOf((*MockMessageChainRepository)(nil).CreateMessageChain), chain)
}
